{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { __awaiter, __rest } from \"tslib\";\nimport { Audio, Video } from 'expo-av';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ControlStates, ErrorSeverity, PlaybackStates } from \"./constants\";\nimport { ErrorMessage, TouchableButton, deepMerge, getMinutesSecondsFromMilliseconds, styles } from \"./utils\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { defaultProps } from \"./props\";\nimport { useEffect, useRef, useState } from 'react';\nimport React from 'react';\nimport Slider from '@react-native-community/slider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar VideoPlayer = function VideoPlayer(tempProps) {\n  var props = deepMerge(defaultProps, tempProps);\n  var playbackInstance = null;\n  var controlsTimer = null;\n  var initialShow = props.defaultControlsVisible;\n  var header = props.header;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    errorMessage = _useState2[0],\n    setErrorMessage = _useState2[1];\n  var controlsOpacity = useRef(new Animated.Value(props.defaultControlsVisible ? 1 : 0)).current;\n  var _useState3 = useState(props.defaultControlsVisible ? ControlStates.Visible : ControlStates.Hidden),\n    _useState4 = _slicedToArray(_useState3, 2),\n    controlsState = _useState4[0],\n    setControlsState = _useState4[1];\n  var _useState5 = useState({\n      position: 0,\n      duration: 0,\n      state: props.videoProps.source ? PlaybackStates.Loading : PlaybackStates.Error\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    playbackInstanceInfo = _useState6[0],\n    setPlaybackInstanceInfo = _useState6[1];\n  var _a = props.slider,\n    sliderRef = _a.ref,\n    sliderProps = __rest(_a, [\"ref\"]);\n  var screenRatio = props.style.width / props.style.height;\n  var videoHeight = props.style.height;\n  var videoWidth = videoHeight * screenRatio;\n  if (videoWidth > props.style.width) {\n    videoWidth = props.style.width;\n    videoHeight = videoWidth / screenRatio;\n  }\n  useEffect(function () {\n    setAudio();\n    return function () {\n      if (playbackInstance) {\n        playbackInstance.setStatusAsync({\n          shouldPlay: false\n        });\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (!props.videoProps.source) {\n      console.error('[VideoPlayer] `Source` is a required in `videoProps`. ' + 'Check https://docs.expo.io/versions/latest/sdk/video/#usage');\n      setErrorMessage('`Source` is a required in `videoProps`');\n      setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), {\n        state: PlaybackStates.Error\n      }));\n    } else {\n      setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), {\n        state: PlaybackStates.Playing\n      }));\n    }\n  }, [props.videoProps.source]);\n  var hideAnimation = function hideAnimation() {\n    Animated.timing(controlsOpacity, {\n      toValue: 0,\n      duration: props.animation.fadeOutDuration,\n      useNativeDriver: true\n    }).start(function (_ref) {\n      var finished = _ref.finished;\n      if (finished) {\n        setControlsState(ControlStates.Hidden);\n      }\n    });\n  };\n  var animationToggle = function animationToggle() {\n    if (controlsState === ControlStates.Hidden) {\n      Animated.timing(controlsOpacity, {\n        toValue: 1,\n        duration: props.animation.fadeInDuration,\n        useNativeDriver: true\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          setControlsState(ControlStates.Visible);\n        }\n      });\n    } else if (controlsState === ControlStates.Visible) {\n      hideAnimation();\n    }\n    if (controlsTimer === null && props.autoHidePlayer) {\n      controlsTimer = setTimeout(function () {\n        if (playbackInstanceInfo.state === PlaybackStates.Playing && controlsState === ControlStates.Hidden) {\n          hideAnimation();\n        }\n        if (controlsTimer) {\n          clearTimeout(controlsTimer);\n        }\n        controlsTimer = null;\n      }, 2000);\n    }\n  };\n  var setAudio = function setAudio() {\n    return __awaiter(void 0, void 0, void 0, function* () {\n      try {\n        yield Audio.setAudioModeAsync({\n          playsInSilentModeIOS: true\n        });\n      } catch (e) {\n        props.errorCallback({\n          type: ErrorSeverity.NonFatal,\n          message: 'Audio.setAudioModeAsync',\n          obj: e\n        });\n      }\n    });\n  };\n  var updatePlaybackCallback = function updatePlaybackCallback(status) {\n    props.playbackCallback(status);\n    if (status.isLoaded) {\n      setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), {\n        position: status.positionMillis,\n        duration: status.durationMillis || 0,\n        state: status.positionMillis === status.durationMillis ? PlaybackStates.Ended : status.isBuffering ? PlaybackStates.Buffering : status.shouldPlay ? PlaybackStates.Playing : PlaybackStates.Paused\n      }));\n      if (status.didJustFinish && controlsState === ControlStates.Hidden || status.isBuffering && controlsState === ControlStates.Hidden && initialShow) {\n        animationToggle();\n        initialShow = false;\n      }\n    } else {\n      if (status.isLoaded === false && status.error) {\n        var errorMsg = \"Encountered a fatal error during playback: \" + status.error;\n        setErrorMessage(errorMsg);\n        props.errorCallback({\n          type: ErrorSeverity.Fatal,\n          message: errorMsg,\n          obj: {}\n        });\n      }\n    }\n  };\n  var togglePlay = function togglePlay() {\n    return __awaiter(void 0, void 0, void 0, function* () {\n      if (controlsState === ControlStates.Hidden) {\n        return;\n      }\n      var shouldPlay = playbackInstanceInfo.state !== PlaybackStates.Playing;\n      if (playbackInstance !== null) {\n        yield playbackInstance.setStatusAsync(Object.assign({\n          shouldPlay: shouldPlay\n        }, playbackInstanceInfo.state === PlaybackStates.Ended && {\n          positionMillis: 0\n        }));\n        setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), {\n          state: playbackInstanceInfo.state === PlaybackStates.Playing ? PlaybackStates.Paused : PlaybackStates.Playing\n        }));\n        if (shouldPlay) {\n          animationToggle();\n        }\n      }\n    });\n  };\n  if (playbackInstanceInfo.state === PlaybackStates.Error) {\n    return _jsx(View, {\n      style: {\n        backgroundColor: props.style.videoBackgroundColor,\n        width: videoWidth,\n        height: videoHeight\n      },\n      children: _jsx(ErrorMessage, {\n        style: props.textStyle,\n        message: errorMessage\n      })\n    });\n  }\n  if (playbackInstanceInfo.state === PlaybackStates.Loading) {\n    return _jsx(View, {\n      style: {\n        backgroundColor: props.style.controlsBackgroundColor,\n        width: videoWidth,\n        height: videoHeight,\n        justifyContent: 'center'\n      },\n      children: props.icon.loading || _jsx(ActivityIndicator, _objectSpread({}, props.activityIndicator))\n    });\n  }\n  return _jsxs(View, {\n    style: {\n      backgroundColor: props.style.videoBackgroundColor,\n      width: videoWidth,\n      height: videoHeight,\n      maxWidth: '100%'\n    },\n    children: [_jsx(Video, _objectSpread(_objectSpread({\n      style: styles.videoWrapper\n    }, props.videoProps), {}, {\n      ref: function ref(component) {\n        playbackInstance = component;\n        if (props.videoProps.ref) {\n          props.videoProps.ref.current = component;\n        }\n      },\n      onPlaybackStatusUpdate: updatePlaybackCallback\n    })), _jsx(Animated.View, {\n      pointerEvents: controlsState === ControlStates.Visible ? 'auto' : 'none',\n      style: [styles.topInfoWrapper, {\n        opacity: controlsOpacity\n      }],\n      children: header\n    }), _jsx(TouchableWithoutFeedback, {\n      onPress: animationToggle,\n      children: _jsxs(Animated.View, {\n        style: Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), {\n          opacity: controlsOpacity,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }),\n        children: [_jsx(View, {\n          style: Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), {\n            backgroundColor: props.style.controlsBackgroundColor,\n            opacity: 0.5\n          })\n        }), _jsx(View, {\n          pointerEvents: controlsState === ControlStates.Visible ? 'auto' : 'none',\n          children: _jsx(View, {\n            style: styles.iconWrapper,\n            children: _jsx(TouchableButton, {\n              onPress: togglePlay,\n              children: _jsxs(View, {\n                children: [playbackInstanceInfo.state === PlaybackStates.Buffering && (props.icon.loading || _jsx(ActivityIndicator, _objectSpread({}, props.activityIndicator))), playbackInstanceInfo.state === PlaybackStates.Playing && props.icon.pause, playbackInstanceInfo.state === PlaybackStates.Paused && props.icon.play, playbackInstanceInfo.state === PlaybackStates.Ended && props.icon.replay, (playbackInstanceInfo.state === PlaybackStates.Ended && !props.icon.replay || playbackInstanceInfo.state === PlaybackStates.Playing && !props.icon.pause || playbackInstanceInfo.state === PlaybackStates.Paused && !props.icon.pause) && _jsx(MaterialIcons, {\n                  name: playbackInstanceInfo.state === PlaybackStates.Playing ? 'pause' : playbackInstanceInfo.state === PlaybackStates.Paused ? 'play-arrow' : 'replay',\n                  style: props.icon.style,\n                  size: props.icon.size,\n                  color: props.icon.color\n                })]\n              })\n            })\n          })\n        })]\n      })\n    }), _jsxs(Animated.View, {\n      pointerEvents: controlsState === ControlStates.Visible ? 'auto' : 'none',\n      style: [styles.bottomInfoWrapper, {\n        opacity: controlsOpacity\n      }],\n      children: [props.timeVisible && _jsx(Text, {\n        style: [props.textStyle, styles.timeLeft],\n        children: getMinutesSecondsFromMilliseconds(playbackInstanceInfo.position)\n      }), props.slider.visible && _jsx(Slider, _objectSpread(_objectSpread({}, sliderProps), {}, {\n        style: [styles.slider, props.slider.style],\n        value: playbackInstanceInfo.duration ? playbackInstanceInfo.position / playbackInstanceInfo.duration : 0,\n        onSlidingStart: function onSlidingStart() {\n          if (playbackInstanceInfo.state === PlaybackStates.Playing) {\n            togglePlay();\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), {\n              state: PlaybackStates.Paused\n            }));\n          }\n        },\n        onSlidingComplete: function onSlidingComplete(e) {\n          return __awaiter(void 0, void 0, void 0, function* () {\n            var position = e * playbackInstanceInfo.duration;\n            if (playbackInstance) {\n              yield playbackInstance.setStatusAsync({\n                positionMillis: position,\n                shouldPlay: true\n              });\n            }\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), {\n              position: position\n            }));\n          });\n        }\n      })), props.timeVisible && _jsx(Text, {\n        style: [props.textStyle, styles.timeRight],\n        children: getMinutesSecondsFromMilliseconds(playbackInstanceInfo.duration)\n      }), props.mute.visible && _jsx(TouchableButton, {\n        onPress: function onPress() {\n          var _a, _b, _c, _d;\n          return props.mute.isMute ? (_b = (_a = props.mute).exitMute) === null || _b === void 0 ? void 0 : _b.call(_a) : (_d = (_c = props.mute).enterMute) === null || _d === void 0 ? void 0 : _d.call(_c);\n        },\n        children: _jsxs(View, {\n          children: [props.icon.mute, props.icon.exitMute, (!props.icon.mute && props.mute.isMute || !props.icon.exitMute && !props.mute.isMute) && _jsx(MaterialIcons, {\n            name: props.mute.isMute ? 'volume-up' : 'volume-off',\n            style: props.icon.style,\n            size: props.icon.size / 2,\n            color: props.icon.color\n          })]\n        })\n      }), props.fullscreen.visible && _jsx(TouchableButton, {\n        onPress: function onPress() {\n          return props.fullscreen.inFullscreen ? props.fullscreen.exitFullscreen() : props.fullscreen.enterFullscreen();\n        },\n        children: _jsxs(View, {\n          children: [!props.fullscreen.inFullscreen && props.icon.fullscreen, props.fullscreen.inFullscreen && props.icon.exitFullscreen, (!props.icon.fullscreen && !props.fullscreen.inFullscreen || !props.icon.exitFullscreen && props.fullscreen.inFullscreen) && _jsx(MaterialIcons, {\n            name: props.fullscreen.inFullscreen ? 'fullscreen-exit' : 'fullscreen',\n            style: props.icon.style,\n            size: props.icon.size / 2,\n            color: props.icon.color\n          })]\n        })\n      })]\n    })]\n  });\n};\nVideoPlayer.defaultProps = defaultProps;\nexport default VideoPlayer;","map":{"version":3,"names":["__awaiter","__rest","Audio","Video","ControlStates","ErrorSeverity","PlaybackStates","ErrorMessage","TouchableButton","deepMerge","getMinutesSecondsFromMilliseconds","styles","MaterialIcons","defaultProps","useEffect","useRef","useState","React","Slider","VideoPlayer","tempProps","props","playbackInstance","controlsTimer","initialShow","defaultControlsVisible","header","errorMessage","setErrorMessage","controlsOpacity","Animated","Value","current","Visible","Hidden","controlsState","setControlsState","position","duration","state","videoProps","source","Loading","Error","playbackInstanceInfo","setPlaybackInstanceInfo","_a","slider","sliderRef","ref","sliderProps","screenRatio","style","width","height","videoHeight","videoWidth","setAudio","setStatusAsync","shouldPlay","console","error","Object","assign","Playing","hideAnimation","timing","toValue","animation","fadeOutDuration","useNativeDriver","start","finished","animationToggle","fadeInDuration","autoHidePlayer","setTimeout","clearTimeout","setAudioModeAsync","playsInSilentModeIOS","e","errorCallback","type","NonFatal","message","obj","updatePlaybackCallback","status","playbackCallback","isLoaded","positionMillis","durationMillis","Ended","isBuffering","Buffering","Paused","didJustFinish","errorMsg","Fatal","togglePlay","backgroundColor","videoBackgroundColor","textStyle","controlsBackgroundColor","justifyContent","icon","loading","activityIndicator","maxWidth","videoWrapper","component","topInfoWrapper","opacity","StyleSheet","absoluteFillObject","alignItems","iconWrapper","pause","play","replay","size","color","bottomInfoWrapper","timeVisible","timeLeft","visible","timeRight","mute","_b","_c","_d","isMute","exitMute","call","enterMute","fullscreen","inFullscreen","exitFullscreen","enterFullscreen"],"sources":["C:/Users/CristianSfetcu/experiments/rn-SocialMedia/node_modules/expo-video-player/dist/index.js"],"sourcesContent":["import { __awaiter, __rest } from \"tslib\";\r\nimport { Audio, Video } from 'expo-av';\r\nimport { ActivityIndicator, Animated, StyleSheet, Text, TouchableWithoutFeedback, View, } from 'react-native';\r\nimport { ControlStates, ErrorSeverity, PlaybackStates } from './constants';\r\nimport { ErrorMessage, TouchableButton, deepMerge, getMinutesSecondsFromMilliseconds, styles, } from './utils';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport { defaultProps } from './props';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport React from 'react';\r\nimport Slider from '@react-native-community/slider';\r\nconst VideoPlayer = (tempProps) => {\r\n    const props = deepMerge(defaultProps, tempProps);\r\n    let playbackInstance = null;\r\n    let controlsTimer = null;\r\n    let initialShow = props.defaultControlsVisible;\r\n    const header = props.header;\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const controlsOpacity = useRef(new Animated.Value(props.defaultControlsVisible ? 1 : 0)).current;\r\n    const [controlsState, setControlsState] = useState(props.defaultControlsVisible ? ControlStates.Visible : ControlStates.Hidden);\r\n    const [playbackInstanceInfo, setPlaybackInstanceInfo] = useState({\r\n        position: 0,\r\n        duration: 0,\r\n        state: props.videoProps.source ? PlaybackStates.Loading : PlaybackStates.Error,\r\n    });\r\n    // We need to extract ref, because of misstypes in <Slider />\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const _a = props.slider, { ref: sliderRef } = _a, sliderProps = __rest(_a, [\"ref\"]);\r\n    const screenRatio = props.style.width / props.style.height;\r\n    let videoHeight = props.style.height;\r\n    let videoWidth = videoHeight * screenRatio;\r\n    if (videoWidth > props.style.width) {\r\n        videoWidth = props.style.width;\r\n        videoHeight = videoWidth / screenRatio;\r\n    }\r\n    useEffect(() => {\r\n        setAudio();\r\n        return () => {\r\n            if (playbackInstance) {\r\n                playbackInstance.setStatusAsync({\r\n                    shouldPlay: false,\r\n                });\r\n            }\r\n        };\r\n    }, []);\r\n    useEffect(() => {\r\n        if (!props.videoProps.source) {\r\n            console.error('[VideoPlayer] `Source` is a required in `videoProps`. ' +\r\n                'Check https://docs.expo.io/versions/latest/sdk/video/#usage');\r\n            setErrorMessage('`Source` is a required in `videoProps`');\r\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Error }));\r\n        }\r\n        else {\r\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Playing }));\r\n        }\r\n    }, [props.videoProps.source]);\r\n    const hideAnimation = () => {\r\n        Animated.timing(controlsOpacity, {\r\n            toValue: 0,\r\n            duration: props.animation.fadeOutDuration,\r\n            useNativeDriver: true,\r\n        }).start(({ finished }) => {\r\n            if (finished) {\r\n                setControlsState(ControlStates.Hidden);\r\n            }\r\n        });\r\n    };\r\n    const animationToggle = () => {\r\n        if (controlsState === ControlStates.Hidden) {\r\n            Animated.timing(controlsOpacity, {\r\n                toValue: 1,\r\n                duration: props.animation.fadeInDuration,\r\n                useNativeDriver: true,\r\n            }).start(({ finished }) => {\r\n                if (finished) {\r\n                    setControlsState(ControlStates.Visible);\r\n                }\r\n            });\r\n        }\r\n        else if (controlsState === ControlStates.Visible) {\r\n            hideAnimation();\r\n        }\r\n        if (controlsTimer === null && props.autoHidePlayer) {\r\n            controlsTimer = setTimeout(() => {\r\n                if (playbackInstanceInfo.state === PlaybackStates.Playing &&\r\n                    controlsState === ControlStates.Hidden) {\r\n                    hideAnimation();\r\n                }\r\n                if (controlsTimer) {\r\n                    clearTimeout(controlsTimer);\r\n                }\r\n                controlsTimer = null;\r\n            }, 2000);\r\n        }\r\n    };\r\n    // Set audio mode to play even in silent mode (like the YouTube app)\r\n    const setAudio = () => __awaiter(void 0, void 0, void 0, function* () {\r\n        try {\r\n            yield Audio.setAudioModeAsync({\r\n                playsInSilentModeIOS: true,\r\n            });\r\n        }\r\n        catch (e) {\r\n            props.errorCallback({\r\n                type: ErrorSeverity.NonFatal,\r\n                message: 'Audio.setAudioModeAsync',\r\n                obj: e,\r\n            });\r\n        }\r\n    });\r\n    const updatePlaybackCallback = (status) => {\r\n        props.playbackCallback(status);\r\n        if (status.isLoaded) {\r\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { position: status.positionMillis, duration: status.durationMillis || 0, state: status.positionMillis === status.durationMillis\r\n                    ? PlaybackStates.Ended\r\n                    : status.isBuffering\r\n                        ? PlaybackStates.Buffering\r\n                        : status.shouldPlay\r\n                            ? PlaybackStates.Playing\r\n                            : PlaybackStates.Paused }));\r\n            if ((status.didJustFinish && controlsState === ControlStates.Hidden) ||\r\n                (status.isBuffering && controlsState === ControlStates.Hidden && initialShow)) {\r\n                animationToggle();\r\n                initialShow = false;\r\n            }\r\n        }\r\n        else {\r\n            if (status.isLoaded === false && status.error) {\r\n                const errorMsg = `Encountered a fatal error during playback: ${status.error}`;\r\n                setErrorMessage(errorMsg);\r\n                props.errorCallback({ type: ErrorSeverity.Fatal, message: errorMsg, obj: {} });\r\n            }\r\n        }\r\n    };\r\n    const togglePlay = () => __awaiter(void 0, void 0, void 0, function* () {\r\n        if (controlsState === ControlStates.Hidden) {\r\n            return;\r\n        }\r\n        const shouldPlay = playbackInstanceInfo.state !== PlaybackStates.Playing;\r\n        if (playbackInstance !== null) {\r\n            yield playbackInstance.setStatusAsync(Object.assign({ shouldPlay }, (playbackInstanceInfo.state === PlaybackStates.Ended && { positionMillis: 0 })));\r\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: playbackInstanceInfo.state === PlaybackStates.Playing\r\n                    ? PlaybackStates.Paused\r\n                    : PlaybackStates.Playing }));\r\n            if (shouldPlay) {\r\n                animationToggle();\r\n            }\r\n        }\r\n    });\r\n    if (playbackInstanceInfo.state === PlaybackStates.Error) {\r\n        return (<View style={{\r\n                backgroundColor: props.style.videoBackgroundColor,\r\n                width: videoWidth,\r\n                height: videoHeight,\r\n            }}>\n        <ErrorMessage style={props.textStyle} message={errorMessage}/>\n      </View>);\r\n    }\r\n    if (playbackInstanceInfo.state === PlaybackStates.Loading) {\r\n        return (<View style={{\r\n                backgroundColor: props.style.controlsBackgroundColor,\r\n                width: videoWidth,\r\n                height: videoHeight,\r\n                justifyContent: 'center',\r\n            }}>\n        {props.icon.loading || <ActivityIndicator {...props.activityIndicator}/>}\n      </View>);\r\n    }\r\n    return (<View style={{\r\n            backgroundColor: props.style.videoBackgroundColor,\r\n            width: videoWidth,\r\n            height: videoHeight,\r\n            maxWidth: '100%',\r\n        }}>\n      <Video style={styles.videoWrapper} {...props.videoProps} ref={component => {\r\n            playbackInstance = component;\r\n            if (props.videoProps.ref) {\r\n                props.videoProps.ref.current = component;\r\n            }\r\n        }} onPlaybackStatusUpdate={updatePlaybackCallback}/>\n\n      <Animated.View pointerEvents={controlsState === ControlStates.Visible ? 'auto' : 'none'} style={[\r\n            styles.topInfoWrapper,\r\n            {\r\n                opacity: controlsOpacity,\r\n            },\r\n        ]}>\n        {header}\n      </Animated.View>\n\n      <TouchableWithoutFeedback onPress={animationToggle}>\n        <Animated.View style={Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { opacity: controlsOpacity, justifyContent: 'center', alignItems: 'center' })}>\n          <View style={Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { backgroundColor: props.style.controlsBackgroundColor, opacity: 0.5 })}/>\n          <View pointerEvents={controlsState === ControlStates.Visible ? 'auto' : 'none'}>\n            <View style={styles.iconWrapper}>\n              <TouchableButton onPress={togglePlay}>\n                <View>\n                  {playbackInstanceInfo.state === PlaybackStates.Buffering &&\r\n            (props.icon.loading || <ActivityIndicator {...props.activityIndicator}/>)}\n                  {playbackInstanceInfo.state === PlaybackStates.Playing && props.icon.pause}\n                  {playbackInstanceInfo.state === PlaybackStates.Paused && props.icon.play}\n                  {playbackInstanceInfo.state === PlaybackStates.Ended && props.icon.replay}\n                  {((playbackInstanceInfo.state === PlaybackStates.Ended && !props.icon.replay) ||\r\n            (playbackInstanceInfo.state === PlaybackStates.Playing && !props.icon.pause) ||\r\n            (playbackInstanceInfo.state === PlaybackStates.Paused &&\r\n                !props.icon.pause)) && (<MaterialIcons name={playbackInstanceInfo.state === PlaybackStates.Playing\r\n                ? 'pause'\r\n                : playbackInstanceInfo.state === PlaybackStates.Paused\r\n                    ? 'play-arrow'\r\n                    : 'replay'} style={props.icon.style} size={props.icon.size} color={props.icon.color}/>)}\n                </View>\n              </TouchableButton>\n            </View>\n          </View>\n        </Animated.View>\n      </TouchableWithoutFeedback>\n\n      <Animated.View pointerEvents={controlsState === ControlStates.Visible ? 'auto' : 'none'} style={[\r\n            styles.bottomInfoWrapper,\r\n            {\r\n                opacity: controlsOpacity,\r\n            },\r\n        ]}>\n        {props.timeVisible && (<Text style={[props.textStyle, styles.timeLeft]}>\n            {getMinutesSecondsFromMilliseconds(playbackInstanceInfo.position)}\n          </Text>)}\n        {props.slider.visible && (<Slider {...sliderProps} style={[styles.slider, props.slider.style]} value={playbackInstanceInfo.duration\r\n                ? playbackInstanceInfo.position / playbackInstanceInfo.duration\r\n                : 0} onSlidingStart={() => {\r\n                if (playbackInstanceInfo.state === PlaybackStates.Playing) {\r\n                    togglePlay();\r\n                    setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Paused }));\r\n                }\r\n            }} onSlidingComplete={(e) => __awaiter(void 0, void 0, void 0, function* () {\r\n                const position = e * playbackInstanceInfo.duration;\r\n                if (playbackInstance) {\r\n                    yield playbackInstance.setStatusAsync({\r\n                        positionMillis: position,\r\n                        shouldPlay: true,\r\n                    });\r\n                }\r\n                setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { position }));\r\n            })}/>)}\n        {props.timeVisible && (<Text style={[props.textStyle, styles.timeRight]}>\n            {getMinutesSecondsFromMilliseconds(playbackInstanceInfo.duration)}\n          </Text>)}\n        {props.mute.visible && (<TouchableButton onPress={() => { var _a, _b, _c, _d; return (props.mute.isMute ? (_b = (_a = props.mute).exitMute) === null || _b === void 0 ? void 0 : _b.call(_a) : (_d = (_c = props.mute).enterMute) === null || _d === void 0 ? void 0 : _d.call(_c)); }}>\n            <View>\n              {props.icon.mute}\n              {props.icon.exitMute}\n              {((!props.icon.mute && props.mute.isMute) ||\r\n                (!props.icon.exitMute && !props.mute.isMute)) && (<MaterialIcons name={props.mute.isMute ? 'volume-up' : 'volume-off'} style={props.icon.style} size={props.icon.size / 2} color={props.icon.color}/>)}\n            </View>\n          </TouchableButton>)}\n        {props.fullscreen.visible && (<TouchableButton onPress={() => props.fullscreen.inFullscreen\r\n                ? props.fullscreen.exitFullscreen()\r\n                : props.fullscreen.enterFullscreen()}>\n            <View>\n              {!props.fullscreen.inFullscreen && props.icon.fullscreen}\n              {props.fullscreen.inFullscreen && props.icon.exitFullscreen}\n              {((!props.icon.fullscreen && !props.fullscreen.inFullscreen) ||\r\n                (!props.icon.exitFullscreen && props.fullscreen.inFullscreen)) && (<MaterialIcons name={props.fullscreen.inFullscreen ? 'fullscreen-exit' : 'fullscreen'} style={props.icon.style} size={props.icon.size / 2} color={props.icon.color}/>)}\n            </View>\n          </TouchableButton>)}\n      </Animated.View>\n    </View>);\r\n};\r\nVideoPlayer.defaultProps = defaultProps;\r\nexport default VideoPlayer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}