{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport Header from \"./Header\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n    scenes = _ref.scenes,\n    layout = _ref.layout,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    onContentHeightChange = _ref.onContentHeightChange,\n    style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentHeaderBack = React.useContext(HeaderBackContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _self, _self2;\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    var _scene$descriptor$opt = scene.descriptor.options,\n      header = _scene$descriptor$opt.header,\n      headerMode = _scene$descriptor$opt.headerMode,\n      _scene$descriptor$opt2 = _scene$descriptor$opt.headerShown,\n      headerShown = _scene$descriptor$opt2 === void 0 ? true : _scene$descriptor$opt2,\n      headerTransparent = _scene$descriptor$opt.headerTransparent,\n      headerStyleInterpolator = _scene$descriptor$opt.headerStyleInterpolator;\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n    var isFocused = focusedRoute.key === scene.descriptor.route.key;\n    var previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    var headerBack = parentHeaderBack;\n    if (previousScene) {\n      var _previousScene$descri = previousScene.descriptor,\n        options = _previousScene$descri.options,\n        route = _previousScene$descri.route;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    }\n    var previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    var nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n    var _ref2 = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {},\n      _ref2$headerShown = _ref2.headerShown,\n      previousHeaderShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n      previousHeaderMode = _ref2.headerMode;\n    var nextHeaderlessScene = self.slice(i + 1).find(function (scene) {\n      var _ref3 = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {},\n        _ref3$headerShown = _ref3.headerShown,\n        currentHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown,\n        currentHeaderMode = _ref3.headerMode;\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n    var _ref4 = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {},\n      nextHeaderlessGestureDirection = _ref4.gestureDirection;\n    var isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;\n    var props = {\n      layout: layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","HeaderBackContext","NavigationContext","NavigationRouteContext","React","forNoAnimation","forSlideLeft","forSlideRight","forSlideUp","Header","HeaderContainer","mode","_ref","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","useContext","Animated","View","pointerEvents","slice","map","scene","i","self","length","descriptor","options","header","headerMode","headerShown","headerTransparent","headerStyleInterpolator","isFocused","key","route","previousScene","headerBack","title","name","previousDescriptor","_self","nextDescriptor","_self2","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","currentHeaderShown","currentHeaderMode","nextHeaderlessGestureDirection","gestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","StyleSheet","create","position","top","left","right"],"sources":["HeaderContainer.tsx"],"sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport Header from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? { title: getHeaderTitle(options, route.name) }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}