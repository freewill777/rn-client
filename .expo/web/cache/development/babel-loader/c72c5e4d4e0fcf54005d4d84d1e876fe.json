{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function SceneView(_ref) {\n  var children = _ref.children,\n    navigationState = _ref.navigationState,\n    lazy = _ref.lazy,\n    layout = _ref.layout,\n    index = _ref.index,\n    lazyPreloadDistance = _ref.lazyPreloadDistance,\n    addEnterListener = _ref.addEnterListener,\n    style = _ref.style;\n  var _React$useState = React.useState(Math.abs(navigationState.index - index) > lazyPreloadDistance),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isLoading = _React$useState2[0],\n    setIsLoading = _React$useState2[1];\n  if (isLoading && Math.abs(navigationState.index - index) <= lazyPreloadDistance) {\n    setIsLoading(false);\n  }\n  React.useEffect(function () {\n    var handleEnter = function handleEnter(value) {\n      if (value === index) {\n        setIsLoading(function (prevState) {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n    var unsubscribe;\n    var timer;\n    if (lazy && isLoading) {\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      timer = setTimeout(function () {\n        return setIsLoading(false);\n      }, 0);\n    }\n    return function () {\n      var _unsubscribe;\n      (_unsubscribe = unsubscribe) === null || _unsubscribe === void 0 ? void 0 : _unsubscribe();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n  var focused = navigationState.index === index;\n  return React.createElement(View, {\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    style: [styles.route, layout.width ? {\n      width: layout.width\n    } : focused ? StyleSheet.absoluteFill : null, style]\n  }, focused || layout.width ? children({\n    loading: isLoading\n  }) : null);\n}\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAmBA,eAAe,SAASC,SAAT,OASF;EAAA,IARXC,QADiD,GAStCC,KARXD,QADiD;IAEjDE,eAFiD,GAStCD,KAPXC,eAFiD;IAGjDC,IAHiD,GAStCF,KANXE,IAHiD;IAIjDC,MAJiD,GAStCH,KALXG,MAJiD;IAKjDC,KALiD,GAStCJ,KAJXI,KALiD;IAMjDC,mBANiD,GAStCL,KAHXK,mBANiD;IAOjDC,gBAPiD,GAStCN,KAFXM,gBAPiD;IAQjDC,QACWP,KADXO;EAEA,sBAAkCV,KAAK,CAACW,QAAN,CAChCC,IAAI,CAACC,GAAL,CAAST,eAAe,CAACG,KAAhB,GAAwBA,KAAjC,IAA0CC,mBADV,CAAlC;IAAA;IAAOM,SAAD;IAAYC,YAAZ;EAIN,IACED,SAAS,IACTF,IAAI,CAACC,GAAL,CAAST,eAAe,CAACG,KAAhB,GAAwBA,KAAjC,KAA2CC,mBAF7C,EAGE;IAEAO,YAAY,CAAC,KAAD,CAAZ;EACD;EAEDf,KAAK,CAACgB,SAAN,CAAgB,YAAM;IACpB,IAAMC,WAAW,GAAIC,SAAfD,WAAW,CAAIC,KAAD,EAAmB;MAErC,IAAIA,KAAK,KAAKX,KAAd,EAAqB;QACnBQ,YAAY,CAAEI,mBAAD,EAAe;UAC1B,IAAIA,SAAJ,EAAe;YACb,OAAO,KAAP;UACD;UACD,OAAOA,SAAP;QACD,CALW,CAAZ;MAMD;IACF,CAVD;IAYA,IAAIC,WAAJ;IACA,IAAIC,KAAJ;IAEA,IAAIhB,IAAI,IAAIS,SAAZ,EAAuB;MAErBM,WAAW,GAAGX,gBAAgB,CAACQ,WAAD,CAA9B;IACD,CAHD,MAGO,IAAIH,SAAJ,EAAe;MAGpBO,KAAK,GAAGC,UAAU,CAAC;QAAA,OAAMP,YAAY,CAAC,KAAD,CAAnB;MAAA,GAA4B,CAA5B,CAAlB;IACD;IAED,OAAO,YAAM;MAAA;MACX,2BAAW,UAAX;MACAQ,YAAY,CAACF,KAAD,CAAZ;IACD,CAHD;EAID,CA7BD,EA6BG,CAACZ,gBAAD,EAAmBF,KAAnB,EAA0BO,SAA1B,EAAqCT,IAArC,CA7BH;EA+BA,IAAMmB,OAAO,GAAGpB,eAAe,CAACG,KAAhB,KAA0BA,KAA1C;EAEA,OACEP,oBAACyB,IAAD;IACEC,2BAA2B,EAAE,CAACF,OADhC;IAEEG,yBAAyB,EAAEH,OAAO,GAAG,MAAH,GAAY,qBAFhD;IAGEd,KAAK,EAAE,CACLkB,MAAM,CAACC,KADF,EAILvB,MAAM,CAACwB,KAAP,GACI;MAAEA,KAAK,EAAExB,MAAM,CAACwB;IAAhB,CADJ,GAEIN,OAAO,GACPO,UAAU,CAACC,YADJ,GAEP,IARC,EASLtB,KATK;EAHT,GAmBIc,OAAO,IAAIlB,MAAM,CAACwB,KAAlB,GAA0B5B,QAAQ,CAAC;IAAE+B,OAAO,EAAEnB;EAAX,CAAD,CAAlC,GAA6D,IAnBjE,CADF;AAwBD;AAED,IAAMc,MAAM,GAAGG,UAAU,CAACG,MAAX,CAAkB;EAC/BL,KAAK,EAAE;IACLM,IAAI,EAAE,CADD;IAELC,QAAQ,EAAE;EAFL;AADwB,CAAlB,CAAf","names":["React","SceneView","children","_ref","navigationState","lazy","layout","index","lazyPreloadDistance","addEnterListener","style","useState","Math","abs","isLoading","setIsLoading","useEffect","handleEnter","value","prevState","unsubscribe","timer","setTimeout","clearTimeout","focused","View","accessibilityElementsHidden","importantForAccessibility","styles","route","width","StyleSheet","absoluteFill","loading","create","flex","overflow"],"sources":["SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\nexport default function SceneView<T extends Route>({\n  children,\n  navigationState,\n  lazy,\n  layout,\n  index,\n  lazyPreloadDistance,\n  addEnterListener,\n  style,\n}: Props<T>) {\n  const [isLoading, setIsLoading] = React.useState(\n    Math.abs(navigationState.index - index) > lazyPreloadDistance\n  );\n\n  if (\n    isLoading &&\n    Math.abs(navigationState.index - index) <= lazyPreloadDistance\n  ) {\n    // Always render the route when it becomes focused\n    setIsLoading(false);\n  }\n\n  React.useEffect(() => {\n    const handleEnter = (value: number) => {\n      // If we're entering the current route, we need to load it\n      if (value === index) {\n        setIsLoading((prevState) => {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n\n    let unsubscribe: (() => void) | undefined;\n    let timer: NodeJS.Timeout;\n\n    if (lazy && isLoading) {\n      // If lazy mode is enabled, listen to when we enter screens\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      timer = setTimeout(() => setIsLoading(false), 0);\n    }\n\n    return () => {\n      unsubscribe?.();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n\n  const focused = navigationState.index === index;\n\n  return (\n    <View\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      style={[\n        styles.route,\n        // If we don't have the layout yet, make the focused screen fill the container\n        // This avoids delay before we are able to render pages side by side\n        layout.width\n          ? { width: layout.width }\n          : focused\n          ? StyleSheet.absoluteFill\n          : null,\n        style,\n      ]}\n    >\n      {\n        // Only render the route only if it's either focused or layout is available\n        // When layout is not available, we must not render unfocused routes\n        // so that the focused route can fill the screen\n        focused || layout.width ? children({ loading: isLoading }) : null\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}